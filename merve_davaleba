from abc import ABC, abstractmethod


class Person(ABC):
    @abstractmethod
    def display_details(self):
        pass


class Student(Person):
    def __init__(self, student_id, name, **grades):
        if not isinstance(student_id, int):
            print(f"student_id should be a number, please edit provided student ID: {student_id}")
        else:
            self.__student_id = student_id
        if not isinstance(name, str):
            print(f"name should be a string, please edit provided name: {name}")
        else:
            self.__name = name
        # if not isinstance(grades, dict):
        #     print("grades should be a dictionary of keys=subjects and values=grades")
        # else:
        self.__grades = grades

    @property
    def grade(self):
        return self.__grades

    @grade.setter
    def grade(self, grade):
        try:
            for key in grade.keys():
                if not isinstance(grade[key], int):
                    print("grade should be a number between 0-100")  # or - raise ValueError ("grade should be a number")
                elif 100 < grade[key] or grade[key] < 0:
                    print("grade should be a number between 0-100")  # or - raise ValueError ("grade should be a number between 0-100"
                elif key in self.__grades.keys():
                    self.__grades[key] = grade[key]
                elif key not in self.__grades.keys():
                    print(f"{key} is not added yet, try adding it first.")
        except:
            print("try providing dictionary of a key=subject and a value=grade, example: Student.grade = {'existing subject': number between 0-100}")

    def add_grade(self, subject, grade):
        try:
            if subject in self.__grades.keys():
                return f"{subject} already added, try updating it."
            elif not isinstance(grade, int):
                raise ValueError("grade should be a number between 0-100")
            elif grade < 0 or grade > 100:
                return "grade should be a number between 0-100"
            else:
                self.__grades[subject] = grade
        except:
            print("try to provide two attributes: new subject and grade, example: Student.add_grade('new subject': a number)")

    def average_grade(self):
        if len(self.__grades) != 0:
            value_dict = self.__grades.values()
            value_list = list(value_dict)
            average = round(sum(value_list)/len(value_list), 1)
            return f"Average grade: {average}"
        else:
            return "Average grade: Grades are not added yet"

    def display_details(self):
        return f"Student ID: {self.__student_id}, Name: {self.__name}, {self.average_grade()}"
class SearchDictMixin:
    def _search(self, searched_object, dict):
        return dict[searched_object]


class StudentManagementSystem(SearchDictMixin):
    __stud_dict = {}

    def stud_list(self):
        return [self.__stud_dict[key].display_details() for key in self.__stud_dict.keys()]


    def add_student(self, student_id, name, **grades):
        if student_id not in self.__stud_dict.keys():
            student = Student(student_id, name, **grades)
            self.__stud_dict[student_id] = student
        else:
            print("Student ID already exist")

    def show_student_details(self, searched_id):
        try:
            if not isinstance(searched_id, int):
                return f"searched_ID should be a number, please edit provided ID: {searched_id}"
            else:
                result = self._search(searched_id, self.__stud_dict)
                return result.display_details()
        except:
            return f"Searched ID {searched_id} is not corresponding to any IDs in our system"

    def show_student_average_grade(self, searched_id):
        try:
            if not isinstance(searched_id, int):
                return f"searched_ID should be a number, please edit provided ID: {searched_id}"
            else:
                result = self._search(searched_id, self.__stud_dict)
                return result.average_grade()
        except:
            return f"Searched ID {searched_id} is not corresponding to any IDs in our system"
